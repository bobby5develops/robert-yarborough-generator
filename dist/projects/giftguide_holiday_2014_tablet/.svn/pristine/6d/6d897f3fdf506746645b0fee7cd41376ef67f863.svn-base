

var ShoprlPage = GgPage.extend({


	/* Initialize any variables that will be needed */
	init: function(params) {
		var params = {
			title: "shoprl",
			url: "html/shoprl.html",
			navId: "shoprl",
			preLoad: []
		};
		var self = this;

		this._super(params);

		$("#finderContainer").on('click','#shoprl .voteButton',{},function(event){
			event.preventDefault();
			event.stopPropagation();
			var entryId = parseInt( $(this).parents('.product').attr('entryId'), 10 );
			var entry = _.findWhere( finder.currentPage.data, {entryId: entryId});
			console.log( entry, "ENTRY" );
			//var e = self.products.db({entryId:entryId}).get();
			
			try {
				addToVoteList(entryId, entry.inVoteList, entry.votes);
			} catch(err) {
				console.log('addToVoteList',entryId, entry.inVoteList, entry.votes);
			}
		});

		$("#finderContainer").on('change','#shoprl .filter',{},function(event){
			event.preventDefault();
			event.stopPropagation();
			var pfeed = $(this).val().split(",")[0];
			var value = $(this).val().split(",")[1];
			self.cb().filterPool( pfeed, value );
			//alert("change");
		});

		$("#finderContainer").on('change','#shoprl #sortby',{},function(event){
			var state = $(this).val();
			//sortPool( state );
			self.cb().sortPool( state );
			//alert("sortby");
		});

		// this.data is orginal data set
		this.data = [];
		// this.currentData is the sorted, filtered or changed data set
		this.currentData = [];
	},
	
	/* Setup your event handlers */
	setup: function() {

		this._super();
		// total number of items of current data
		var totalItems = 0;
		// start index for paging
		var pageIndex = 0;
		// number of items to load at a time
		var pageSize = 15;
		// only renders pages if the does not equal pageSize
		var prevItemsOnPage;
		// set dynamic page proeprty to the page value/
		// on scroll this will change
		var itemsOnPage = pageSize;
		// current data filtered and sorted if need be
		var currentSort;
		// the data for the page
		var pageData;

		var itemsPerRow = 5;

		var self = this;

		var config;

		
		var wantVideos = false;
		// the pool DOM container
		var $container = $( ".products" );
		// html template by id
		var productTemplate = "#productListingNew";

		var grid = [[1,1,0,0,0],
					[1,1,0,0,0],
					[0,0,0,0,0],
					[0,0,0,1,1],
					[0,0,0,1,1],
					[0,0,0,0,0],
					[1,1,0,0,0],
					[1,1,0,0,0]];

	
		function setConfig( configObject ) {
			config = configObject;
		}

		// reset pool
		// emptry container
		// unbind scrolling
		function resetPool() {
			itemsOnPage = pageSize;
			wantVideos = false;
			//unbindEvents();
			$container.empty();
			$('.filterBar #sortby').val(0);
			//$(".filterBar #sortby").val("")
		}

		// load the pool
		function loadPool( url ) {
			var poolRequest = $.ajax({
				type: "GET",
				url: url,
				dataType: "jsonp",
				timeout: 30000,
				tryCount: 0,
				tryLimit: 2,
				async: true,
				success: function( data, textStatus, jqXHR ){
					console.log("pool data has been laoded successfully");
					finder.loadingDisplay.end("load_pool");
					startPool( data );
				},
				error: function( request, type, errorThrown ){
					//alert("ERROR");
					console.error( 'error loading', arguments );
					//self.loadNext();
					finder.loadingDisplay.end("load_pool");
				}
			});
		}

		// once the data is loaded do this
		function startPool( data ) {
			// self.data is orginal data set
			self.data = BBPool.processDataRalphLauren( data );
			self.currentData = self.data.slice(0);
			sortPool();
		}

		// renders data for current page
		function setPage() {
			//pageData = self.currentData.slice( pageIndex * itemsOnPage, pageIndex * itemsOnPage + itemsOnPage );
			console.log( pageData, ' pageData *********************');
			renderPage( self.currentData );
		}

		// increments page as user scrolls down
		function incrementPage() {
			prevItemsOnPage = itemsOnPage;
			// page size gets bigger and bigger until it equals the total items
			itemsOnPage =  (itemsOnPage + pageSize > totalItems ) ? totalItems : itemsOnPage + pageSize;
			if (prevItemsOnPage !== itemsOnPage) {
				setPage();
			} else {
				unbindEvents();
			}
		}

		// DOM specific events can go here
		function bindEvents() {
			try {
				$( parent.window.document ).bind('scroll.endless', function(){
					console.log(" SCROLL ");
					var headerHeight = 212;
					var scrollTop = $( parent.window.document ).scrollTop();
					var contentHeight = $( parent.window.document ).height();
					var windowHeight = $( parent.window ).height();
					var p = scrollTop / ( contentHeight - windowHeight );
					// AUTO LOAD NEXT PAGE OF PRODUCTS
					if( p > 0.8 ){
						incrementPage();
					}
				});
			} catch( err ) {
				console.log( "Error", err);
			}


		}

		function unbindEvents() {
			$( parent.window.document ).unbind( "scroll.endless" );
		}

		function buildVideo( data, productWidth, productHeight, margin ) {
			var videoDiv = $( "#videoTemplate" ).tmpl( data ).appendTo( $container );
			var video = videoDiv.find("video");

			video.css("opacity","0");
			video.on("canplaythrough", function( event ) {
				// on firefox has annoying hairline to the right you can se background image through
				if ($.browser.mozilla) {
					videoDiv.css( "background", "none" );
				}
				// fade in video over background image
				video.css("opacity","1");
			});


			var sizeX = data.size[ 0 ];
			var sizeY = data.size[ 1 ];
			var positionX = data.gridPosition[ 0 ];
			var positionY = data.gridPosition[ 1 ];
			
			var width = ( sizeX * productWidth ) + ( sizeX - 1 ) * margin;

			// subtract the 1px border from left and righ side
			width = width - 2;
			var height = ( sizeY * productHeight ) + ( sizeY - 1 ) * margin;
			var x = ( productWidth + margin ) * positionX;
			var y = ( productHeight + margin ) * positionY;

			video.css({
				width: width
			});


			var videoHeight = height - 2;


			if (finder.isTablet() === true) {
				videoDiv.empty();
				var tabletWidth = productWidth * 2 + margin;
				videoDiv.css( {
					width: tabletWidth + "px",
					height: videoHeight
				} );

			}

			videoDiv.css({
				left: x,
				top: y,
				height: videoHeight + "px"
			});
		}

		// destroy and rebuild page
		function renderPage( data ) {
			console.log("renderPage0");
			$container.empty();
			console.log("renderPage1");
			
			var margin = 15;
			var i;
			var counter;
			var xindex;
			var yindex;
			var j;
			var k;

			/*
			var video = $( "#videoTemplate" ).tmpl( ).appendTo( $container );
			video.css( { "margin-top":"20px", "margin-left":"20px" } );

			var video = $( "#videoTemplate2" ).tmpl( ).appendTo( $container );
			video.css( { "margin-top":"80px", "margin-left":"80px" } );

			var video = $( "#videoTemplate3" ).tmpl( ).appendTo( $container );
			video.css( { "margin-top":"100px", "margin-left":"40px" } );
			*/

			var productsHTML = $( productTemplate ).tmpl( data );
			$container.append( productsHTML );
			var $products = $(".product");
			
			

			var $product0 = $products.eq( 0 );

			var productWidth = $product0.width();
			var productHeight = $product0.height();
			var totalProductWidth = productWidth + margin;
			var totalProductHeight = productHeight + margin;

			if (config.videoData){
				if (config.videoData.videos) {
					wantVideos = true;
					i = 0;
					while( i < config.videoData.videos.length ) {
						buildVideo(config.videoData.videos[ i ],productWidth,productHeight,margin);
						i++;
					}
				}
			}

			i = 0;
			counter = 0;
			//alert( $products.length );
			while( i < $products.length ) {
				var $product = $products.eq(i);
				j = counter % itemsPerRow;
				k = Math.floor( ( counter ) / itemsPerRow );
				var x;
				var y;
				if ( wantVideos ) {
					if ( grid[ k ][ j ]) {
						if ( grid[ k ][ j ] === 0 ) {
							x = j * totalProductWidth;
							y = k * totalProductHeight;
							$product.css( "left", x );
							$product.css( "top", y );
							i++;
						}
					} else {
						x = j * totalProductWidth;
						y = k * totalProductHeight;
						$product.css( "left", x );
						$product.css( "top", y );
						i++;
					}
				} else {
					x = j * totalProductWidth;
					y = k * totalProductHeight;
					$product.css( "left", x );
					$product.css( "top", y );
					i++;
				}
				

				if (counter > 1000) {
					break;
				}

				counter ++;
			}

			var totalHeight = ( k + 1 ) * totalProductHeight;
			//var videoHeight = 
			var videoHeight = 0;
			if ( config.videoData ) {
				if ( config.videoData.videos ) {
					var highest = _.max( config.videoData.videos, function( o ){ return o.gridPosition[1]; } );
					videoHeight = highest.gridPosition[1] * totalProductHeight + highest.size[1] * totalProductHeight;
				}
			}
			var newHeight = Math.max( totalHeight, videoHeight );

			$( ".products" ).height( newHeight );
		}

		function sortPool( state ) {
			currentSort = state;
			switch( state ) {
				case "PRICE_HIGH_TO_LOW":
					self.currentData = BBPool.sortDataPriceHighToLow( self.currentData );
					break;
				case "PRICE_LOW_TO_HIGH":
					self.currentData = BBPool.sortDataPriceLowToHigh( self.currentData );
					break;
				case "VOTES_HIGH_TO_LOW":
					self.currentData = BBPool.sortDataVotesHighToLow( self.currentData );
					//self.currentData = BBPool.sortDataPriceLowtoHigh( self.data.slice(0) );
					break;
				default:
					self.currentData = BBPool.sortDataByPoolOrder( self.currentData );
			}
			totalItems = self.currentData.length;
			setPage();
		}

		function filterPool( pfeed, value ) {
			if ( value === "DEFAULT" ) {
				self.currentData = self.data.slice(0);
			} else {
				self.currentData = BBPool.filter( self.data.slice(0), function( entry ) {
					if( entry[ pfeed ] === value ) return entry;
				} );
			}
			sortPool( currentSort );
			//totalItems = self.currentData.length;
			//setPage();
		}

		function buildHeader( o ) {
			var headerTemplate = "#shopHeaderTemplate";
			var $container = $(".marquee");

			$container.empty();
			$( headerTemplate ).tmpl( o ).appendTo( $container );
		}

		function buildFilters( o ) {

			//$container.empty();
			var template;
			var $container = $( ".filterBar", this.parentDiv );
			$container.empty();

			if (o.filters) {
				template = "#filterTemplate";
				
				$( template ).tmpl( o.filters ).appendTo( $container );
			}

			template = "#sortTemplate";
			var html = $( template ).tmpl();
			$container.append( html );
			
		}
		
		var cb = function() {
			return {
				
				setConfig: setConfig,

				resetPool: resetPool,
				loadPool: loadPool,
				sortPool: sortPool,
				filterPool: filterPool,

				buildHeader: buildHeader,
				buildFilters: buildFilters
			};
		};

		self.cb = cb;
	},
	
	/* Handle Deeplinking */
	processParams: function() {
		this._super();

		var config;
		// Get the right config onject
		if ( this.params ) {
			if ( this.params.argc ) {
				if ( this.params.argc.length > 0 ) {
					if ( finder.getConfig()[ this.navId ] ) {
						if ( finder.getConfig()[ this.navId ][ this.params.argc[0] ] ) {
							config = finder.getConfig()[ this.navId ][ this.params.argc[0] ];
						}
					}
				}
			}
		}

		var setupInterface = this.cb();
		// pool url
	
		setupInterface.resetPool();
		if ( config ) {
			setupInterface.setConfig( config );
			setupInterface.buildHeader( config );
			setupInterface.buildFilters( config );

			var url = poolRoot + config.poolName;
			finder.loadingDisplay.start( "load_pool" );
			setupInterface.loadPool( url );
			//setTimeout( function() { setupInterface.loadPool( url ); }, 1000 );
		}

		this.prevArgc = this.params.argc;


////highlight subnav
        var currentSub = finder.currentPage.params.argc[0];
        $('.rl_nav_container').find('.selected').removeClass('selected');
        $('.rl_nav_container').find('.'+currentSub).addClass('selected');


    },

	/* Transition your page in */
	transitionIn: function() {
		this._super();
	},
	
	/* Transition your page Out */
	transitionOut: function() {
		this._super();
	},
	
	/* Unload the page */
	unload: function() {
		
		// clear timers
		// unset events on items outside of this page.
		// unset LIVE events
		
		this._super();

		$( parent.window.document ).unbind( "scroll.endless" );
	},
	
	/* Handle tracking for this page */
	handleTracking: function() {
		this._super();
	}
});

